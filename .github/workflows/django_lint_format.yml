on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  format:
    name: Format Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [black, isort, djlint]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install ${{ matrix.tool }}
        run: pip install ${{ matrix.tool }}
      - name: Run ${{ matrix.tool }}
        run: |
          if [ "${{ matrix.tool }}" = "black" ]; then
            black university
          elif [ "${{ matrix.tool }}" = "isort" ]; then
            isort university
          elif [ "${{ matrix.tool }}" = "djlint" ]; then
            djlint --reformat university
          fi
      - name: Upload formatted code
        uses: actions/upload-artifact@v3
        with:
          name: formatted-code-${{ matrix.tool }}
          path: university

  combine-and-commit:
    name: Combine Formatting Changes and Commit
    needs: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Combine changes
        run: |
          for dir in formatted-code-*; do
            cp -R $dir/university/* university/
          done
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff-index --quiet HEAD || (git commit -m "Apply automatic formatting" && git push)

  lint:
    name: Lint and Check
    needs: combine-and-commit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [flake8, black, djlint, isort]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: Run ${{ matrix.tool }}
        run: tox -e ${{ matrix.tool }}

  notify:
    name: Notify about changes
    needs: [combine-and-commit, lint]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Check for changes
        run: |
          git fetch origin
          git diff --quiet origin/${{ github.ref_name }} || echo "changes=true" >> $GITHUB_OUTPUT
        id: git-check
      - name: Notify about changes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          echo "Formatting changes were made. Please pull the latest changes."
